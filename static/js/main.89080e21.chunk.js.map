{"version":3,"sources":["component/Icon.js","component/Colors.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["StyledIcon","styled","span","Icon","group","this","props","name","className","style","Component","Keyword","Constant","String","Logo","img","LeftPad","div","Header","header","Link","a","Copyright","HostBy","h3","Title","h1","App","year","Date","getFullYear","src","logo","alt","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"ucAGA,IAAMA,EAAaC,IAAOC,KAAV,KAgBDC,E,iLAPX,IAAMC,EAAQC,KAAKC,MAAMF,OAAS,MAC5BG,EAAOF,KAAKC,MAAMC,KAClBC,EAAS,UAAMJ,EAAN,eAAkBG,EAAlB,YAA0BF,KAAKC,MAAME,WACpD,OAAO,kBAACR,EAAD,CAAYQ,UAAWA,EAAWC,MAAOJ,KAAKC,MAAMG,Y,GAL5CC,a,oTCPnB,IAAMC,EAAUV,IAAOC,KAAV,KAIPU,EAAWX,IAAOC,KAAV,KAKRW,EAASZ,IAAOC,KAAV,K,q0BCLZ,IAAMY,EAAOb,IAAOc,IAAV,KAIJC,EAAUf,IAAOgB,IAAV,KAOPC,EAASjB,IAAOkB,OAAV,KAINC,EAAOnB,IAAOoB,EAAV,KAIJC,EAAYrB,IAAOgB,IAAV,KAMTM,EAAStB,IAAOuB,GAAV,KAMNC,EAAQxB,IAAOyB,GAAV,KA4CIC,MAtCf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,yBAAKtB,UAAU,OACb,kBAACU,EAAD,KACE,kBAACJ,EAAD,CAAMiB,IAAKC,IAAMC,IAAI,8BAEvB,6BACE,kBAACjB,EAAD,cAAe,kBAACL,EAAD,cAAf,gBAAoD,kBAACC,EAAD,gBAApD,0CACoB,kBAAC,EAAD,qBADpB,eAEA,kBAACW,EAAD,KAAQ,2CACR,kBAACE,EAAD,iBACA,kBAACT,EAAD,qCACA,kBAACA,EAAD,KACE,4BACE,kBAACI,EAAD,CAAMc,KAAK,2DAA2DC,OAAO,UAC3E,kBAAC,EAAD,CAAM/B,MAAM,MAAMG,KAAK,aAEzB,kBAACa,EAAD,CAAMc,KAAK,mCAAmCC,OAAO,UACnD,kBAAC,EAAD,CAAM/B,MAAM,MAAMG,KAAK,YAEzB,kBAACa,EAAD,CAAMc,KAAK,mCAAmCC,OAAO,UACnD,kBAAC,EAAD,CAAM/B,MAAM,MAAMG,KAAK,YAEzB,kBAACa,EAAD,CAAMc,KAAK,oCAAoCC,OAAO,UACpD,kBAAC,EAAD,CAAM/B,MAAM,MAAMG,KAAK,aAEzB,kBAACa,EAAD,CAAMc,KAAK,sCAAsCC,OAAO,UACtD,kBAAC,EAAD,CAAM/B,MAAM,MAAMG,KAAK,kBAK/B,kBAACe,EAAD,0BAA2BM,EAA3B,wDCjEcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.89080e21.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledIcon = styled.span`\n  height: auto !important;\n  width: auto !important;\n  font-size: inherit !important;\n  color: inherit;\n`;\n\nclass Icon extends Component {\n  render() {\n    const group = this.props.group || \"fas\";\n    const name = this.props.name;\n    const className = `${group} fa-${name} ${this.props.className}`;\n    return <StyledIcon className={className} style={this.props.style} />;\n  }\n}\n\nexport default Icon;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst Keyword = styled.span`\n    color: #cc7832;\n`;\n\nconst Constant = styled.span`\n    text-transform: uppercase;\n    color: #9876AA;\n`;\n\nconst String = styled.span`\n    color: #6a8759;\n`;\n\nexport {\n    Keyword,\n    Constant,\n    String\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport logo from './logo.png';\nimport './App.css';\nimport Icon from \"./component/Icon\";\nimport {Keyword, Constant, String} from \"./component/Colors\";\n\nconst Logo = styled.img`\n  margin-left: 10px;\n`;\n\nconst LeftPad = styled.div`\n  margin-top: 10px;\n  margin-bottom: 10px;\n  margin-left: 50px;\n  padding: 10px;\n`;\n\nconst Header = styled.header`\n  margin-bottom: 10px;\n`;\n\nconst Link = styled.a`\n    margin-right: 20px;\n`;\n\nconst Copyright = styled.div`\n  margin-left: 10px;\n  font-size: 12px;\n  color: #808080;\n`;\n\nconst HostBy = styled.h3`\n  margin-left: 50px;\n  padding: 0 10px;\n  margin-bottom: 0;\n`;\n\nconst Title = styled.h1`\n  margin-left: 50px;\n  padding: 0 10px;\n  margin-top: 0;\n`;\n\nfunction App() {\n  const year = new Date().getFullYear();\n  return (\n    <div className=\"App\">\n      <Header>\n        <Logo src={logo} alt=\"Pair Programming with Me\"/>\n      </Header>\n      <div>\n        <LeftPad>watch <Keyword>short</Keyword> videos with <Constant>intense</Constant> coding about common\n          problems based on <String>\"real world\"</String> scenarios;</LeftPad>\n        <HostBy><small>host by</small></HostBy>\n        <Title>David SG</Title>\n        <LeftPad>david@pairprogrammingwith.me</LeftPad>\n        <LeftPad>\n          <h2>\n            <Link href=\"https://www.youtube.com/channel/UCIseyoNPNvBKUv37RPuzw1w\" target=\"_blank\">\n              <Icon group=\"fab\" name=\"youtube\"/>\n            </Link>\n            <Link href=\"https://github.com/PairingWithMe\" target=\"_blank\">\n              <Icon group=\"fab\" name=\"github\"/>\n            </Link>\n            <Link href=\"https://medium.com/PairingWithMe\" target=\"_blank\">\n              <Icon group=\"fab\" name=\"medium\"/>\n            </Link>\n            <Link href=\"https://twitter.com/PairingWithMe\" target=\"_blank\">\n              <Icon group=\"fab\" name=\"twitter\"/>\n            </Link>\n            <Link href=\"https://instagram.com/PairingWithMe\" target=\"_blank\">\n              <Icon group=\"fab\" name=\"instagram\" />\n            </Link>\n          </h2>\n        </LeftPad>\n      </div>\n      <Copyright>/* Copyright Â© {year} Pair Programming with Me. All rights reserved. */</Copyright>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.48ef572f.png\";"],"sourceRoot":""}